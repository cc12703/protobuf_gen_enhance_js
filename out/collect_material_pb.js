// source: collect_material.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var collect_common_pb = require('./collect_common_pb.js');
goog.object.extend(proto, collect_common_pb);
goog.exportSymbol('proto.collect.material.TestCommonInfo', null, global);
goog.exportSymbol('proto.collect.material.TestListReq', null, global);
goog.exportSymbol('proto.collect.material.TestListResp', null, global);
goog.exportSymbol('proto.collect.material.TestMapReq', null, global);
goog.exportSymbol('proto.collect.material.TestMapResp', null, global);
goog.exportSymbol('proto.collect.material.TestNestReq', null, global);
goog.exportSymbol('proto.collect.material.TestNestReq.SubInfo', null, global);
goog.exportSymbol('proto.collect.material.TestNestResp', null, global);
goog.exportSymbol('proto.collect.material.TestNormalReq', null, global);
goog.exportSymbol('proto.collect.material.TestNormalResp', null, global);
goog.exportSymbol('proto.collect.material.TestRefReq', null, global);
goog.exportSymbol('proto.collect.material.TestRefResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestNormalReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestNormalReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestNormalReq.displayName = 'proto.collect.material.TestNormalReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestNormalResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestNormalResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestNormalResp.displayName = 'proto.collect.material.TestNormalResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestNestReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestNestReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestNestReq.displayName = 'proto.collect.material.TestNestReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestNestReq.SubInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestNestReq.SubInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestNestReq.SubInfo.displayName = 'proto.collect.material.TestNestReq.SubInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestNestResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestNestResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestNestResp.displayName = 'proto.collect.material.TestNestResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.collect.material.TestListReq.repeatedFields_, null);
};
goog.inherits(proto.collect.material.TestListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestListReq.displayName = 'proto.collect.material.TestListReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestListResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestListResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestListResp.displayName = 'proto.collect.material.TestListResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestMapReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestMapReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestMapReq.displayName = 'proto.collect.material.TestMapReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestMapResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestMapResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestMapResp.displayName = 'proto.collect.material.TestMapResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestCommonInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestCommonInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestCommonInfo.displayName = 'proto.collect.material.TestCommonInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestRefReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestRefReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestRefReq.displayName = 'proto.collect.material.TestRefReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.collect.material.TestRefResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.collect.material.TestRefResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.collect.material.TestRefResp.displayName = 'proto.collect.material.TestRefResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestNormalReq.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestNormalReq.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestNormalReq.prototype.fromObject = function(obj) {
      proto.collect.material.TestNormalReq.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestNormalReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestNormalReq.toObject = function(includeInstance, msg) {
    var f, obj = {
      type: jspb.Message.getFieldWithDefault(msg, 1, ""),
      uid: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestNormalReq.buildObject = function(obj) {
  var msg = new proto.collect.material.TestNormalReq;
  proto.collect.material.TestNormalReq.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestNormalReq.fromObject = function(obj, msg) {
  if('type' in obj) {
  var vtype = obj.type;
  msg.setType(vtype)
  }
  if('uid' in obj) {
  var vuid = obj.uid;
  msg.setUid(vuid)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestNormalReq}
 */
proto.collect.material.TestNormalReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestNormalReq;
  return proto.collect.material.TestNormalReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestNormalReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestNormalReq}
 */
proto.collect.material.TestNormalReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestNormalReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestNormalReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestNormalReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestNormalReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.collect.material.TestNormalReq.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.collect.material.TestNormalReq} returns this
 */
proto.collect.material.TestNormalReq.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string uid = 2;
 * @return {string}
 */
proto.collect.material.TestNormalReq.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.collect.material.TestNormalReq} returns this
 */
proto.collect.material.TestNormalReq.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestNormalResp.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestNormalResp.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestNormalResp.prototype.fromObject = function(obj) {
      proto.collect.material.TestNormalResp.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestNormalResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestNormalResp.toObject = function(includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestNormalResp.buildObject = function(obj) {
  var msg = new proto.collect.material.TestNormalResp;
  proto.collect.material.TestNormalResp.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestNormalResp.fromObject = function(obj, msg) {
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestNormalResp}
 */
proto.collect.material.TestNormalResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestNormalResp;
  return proto.collect.material.TestNormalResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestNormalResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestNormalResp}
 */
proto.collect.material.TestNormalResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestNormalResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestNormalResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestNormalResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestNormalResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestNestReq.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestNestReq.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestNestReq.prototype.fromObject = function(obj) {
      proto.collect.material.TestNestReq.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestNestReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestNestReq.toObject = function(includeInstance, msg) {
    var f, obj = {
      uid: jspb.Message.getFieldWithDefault(msg, 1, ""),
      addDate: jspb.Message.getFieldWithDefault(msg, 2, 0),
      sInfo: (f = msg.getSInfo()) && proto.collect.material.TestNestReq.SubInfo.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestNestReq.buildObject = function(obj) {
  var msg = new proto.collect.material.TestNestReq;
  proto.collect.material.TestNestReq.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestNestReq.fromObject = function(obj, msg) {
  if('uid' in obj) {
  var vuid = obj.uid;
  msg.setUid(vuid)
  }
  if('addDate' in obj) {
  var vaddDate = obj.addDate;
  msg.setAddDate(vaddDate)
  }
  if('sInfo' in obj) {
  var vsInfo = new proto.collect.material.TestNestReq.SubInfo;
  vsInfo.fromObject(obj.sInfo);
  msg.setSInfo(vsInfo)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestNestReq}
 */
proto.collect.material.TestNestReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestNestReq;
  return proto.collect.material.TestNestReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestNestReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestNestReq}
 */
proto.collect.material.TestNestReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAddDate(value);
      break;
    case 3:
      var value = new proto.collect.material.TestNestReq.SubInfo;
      reader.readMessage(value,proto.collect.material.TestNestReq.SubInfo.deserializeBinaryFromReader);
      msg.setSInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestNestReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestNestReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestNestReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestNestReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddDate();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.collect.material.TestNestReq.SubInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestNestReq.SubInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestNestReq.SubInfo.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestNestReq.SubInfo.prototype.fromObject = function(obj) {
      proto.collect.material.TestNestReq.SubInfo.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestNestReq.SubInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestNestReq.SubInfo.toObject = function(includeInstance, msg) {
    var f, obj = {
      contentUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
      thumbUrl: jspb.Message.getFieldWithDefault(msg, 2, "")
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestNestReq.SubInfo.buildObject = function(obj) {
  var msg = new proto.collect.material.TestNestReq.SubInfo;
  proto.collect.material.TestNestReq.SubInfo.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestNestReq.SubInfo.fromObject = function(obj, msg) {
  if('contentUrl' in obj) {
  var vcontentUrl = obj.contentUrl;
  msg.setContentUrl(vcontentUrl)
  }
  if('thumbUrl' in obj) {
  var vthumbUrl = obj.thumbUrl;
  msg.setThumbUrl(vthumbUrl)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestNestReq.SubInfo}
 */
proto.collect.material.TestNestReq.SubInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestNestReq.SubInfo;
  return proto.collect.material.TestNestReq.SubInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestNestReq.SubInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestNestReq.SubInfo}
 */
proto.collect.material.TestNestReq.SubInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumbUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestNestReq.SubInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestNestReq.SubInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestNestReq.SubInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestNestReq.SubInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getThumbUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string contentUrl = 1;
 * @return {string}
 */
proto.collect.material.TestNestReq.SubInfo.prototype.getContentUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.collect.material.TestNestReq.SubInfo} returns this
 */
proto.collect.material.TestNestReq.SubInfo.prototype.setContentUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string thumbUrl = 2;
 * @return {string}
 */
proto.collect.material.TestNestReq.SubInfo.prototype.getThumbUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.collect.material.TestNestReq.SubInfo} returns this
 */
proto.collect.material.TestNestReq.SubInfo.prototype.setThumbUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 1;
 * @return {string}
 */
proto.collect.material.TestNestReq.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.collect.material.TestNestReq} returns this
 */
proto.collect.material.TestNestReq.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 addDate = 2;
 * @return {number}
 */
proto.collect.material.TestNestReq.prototype.getAddDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.collect.material.TestNestReq} returns this
 */
proto.collect.material.TestNestReq.prototype.setAddDate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional SubInfo sInfo = 3;
 * @return {?proto.collect.material.TestNestReq.SubInfo}
 */
proto.collect.material.TestNestReq.prototype.getSInfo = function() {
  return /** @type{?proto.collect.material.TestNestReq.SubInfo} */ (
    jspb.Message.getWrapperField(this, proto.collect.material.TestNestReq.SubInfo, 3));
};


/**
 * @param {?proto.collect.material.TestNestReq.SubInfo|undefined} value
 * @return {!proto.collect.material.TestNestReq} returns this
*/
proto.collect.material.TestNestReq.prototype.setSInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collect.material.TestNestReq} returns this
 */
proto.collect.material.TestNestReq.prototype.clearSinfo = function() {
  return this.setSInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collect.material.TestNestReq.prototype.hasSinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestNestResp.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestNestResp.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestNestResp.prototype.fromObject = function(obj) {
      proto.collect.material.TestNestResp.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestNestResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestNestResp.toObject = function(includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestNestResp.buildObject = function(obj) {
  var msg = new proto.collect.material.TestNestResp;
  proto.collect.material.TestNestResp.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestNestResp.fromObject = function(obj, msg) {
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestNestResp}
 */
proto.collect.material.TestNestResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestNestResp;
  return proto.collect.material.TestNestResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestNestResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestNestResp}
 */
proto.collect.material.TestNestResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestNestResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestNestResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestNestResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestNestResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.collect.material.TestListReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestListReq.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestListReq.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestListReq.prototype.fromObject = function(obj) {
      proto.collect.material.TestListReq.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestListReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestListReq.toObject = function(includeInstance, msg) {
    var f, obj = {
      page: jspb.Message.getFieldWithDefault(msg, 1, 0),
      fType: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestListReq.buildObject = function(obj) {
  var msg = new proto.collect.material.TestListReq;
  proto.collect.material.TestListReq.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestListReq.fromObject = function(obj, msg) {
  if('page' in obj) {
  var vpage = obj.page;
  msg.setPage(vpage)
  }
  if('fType' in obj) {
  var vfType = obj.fType;
  msg.setFType(vfType)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestListReq}
 */
proto.collect.material.TestListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestListReq;
  return proto.collect.material.TestListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestListReq}
 */
proto.collect.material.TestListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addFType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getFType();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.collect.material.TestListReq.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collect.material.TestListReq} returns this
 */
proto.collect.material.TestListReq.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string fType = 2;
 * @return {!Array<string>}
 */
proto.collect.material.TestListReq.prototype.getFType = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.collect.material.TestListReq} returns this
 */
proto.collect.material.TestListReq.prototype.setFType = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.collect.material.TestListReq} returns this
 */
proto.collect.material.TestListReq.prototype.addFType = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.collect.material.TestListReq} returns this
 */
proto.collect.material.TestListReq.prototype.clearFType = function() {
  return this.setFType([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestListResp.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestListResp.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestListResp.prototype.fromObject = function(obj) {
      proto.collect.material.TestListResp.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestListResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestListResp.toObject = function(includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestListResp.buildObject = function(obj) {
  var msg = new proto.collect.material.TestListResp;
  proto.collect.material.TestListResp.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestListResp.fromObject = function(obj, msg) {
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestListResp}
 */
proto.collect.material.TestListResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestListResp;
  return proto.collect.material.TestListResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestListResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestListResp}
 */
proto.collect.material.TestListResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestListResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestListResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestListResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestListResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestMapReq.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestMapReq.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestMapReq.prototype.fromObject = function(obj) {
      proto.collect.material.TestMapReq.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestMapReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestMapReq.toObject = function(includeInstance, msg) {
    var f, obj = {
      limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
      gSimilar: (f = msg.getGSimilar()) ? f.toObject(includeInstance, undefined) : []
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestMapReq.buildObject = function(obj) {
  var msg = new proto.collect.material.TestMapReq;
  proto.collect.material.TestMapReq.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestMapReq.fromObject = function(obj, msg) {
  if('limit' in obj) {
  var vlimit = obj.limit;
  msg.setLimit(vlimit)
  }
  if('gSimilar' in obj) {
  obj.gSimilar.forEach(pair => {
  var vgSimilarKey = pair[0];
  var vgSimilarVal = pair[1];
  msg.getGSimilar().set(vgSimilarKey, vgSimilarVal)
  })
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestMapReq}
 */
proto.collect.material.TestMapReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestMapReq;
  return proto.collect.material.TestMapReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestMapReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestMapReq}
 */
proto.collect.material.TestMapReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 2:
      var value = msg.getGSimilar();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestMapReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestMapReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestMapReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestMapReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGSimilar(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional int32 limit = 1;
 * @return {number}
 */
proto.collect.material.TestMapReq.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collect.material.TestMapReq} returns this
 */
proto.collect.material.TestMapReq.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * map<string, string> gSimilar = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.collect.material.TestMapReq.prototype.getGSimilar = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.collect.material.TestMapReq} returns this
 */
proto.collect.material.TestMapReq.prototype.clearGSimilar = function() {
  this.getGSimilar().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestMapResp.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestMapResp.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestMapResp.prototype.fromObject = function(obj) {
      proto.collect.material.TestMapResp.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestMapResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestMapResp.toObject = function(includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestMapResp.buildObject = function(obj) {
  var msg = new proto.collect.material.TestMapResp;
  proto.collect.material.TestMapResp.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestMapResp.fromObject = function(obj, msg) {
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestMapResp}
 */
proto.collect.material.TestMapResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestMapResp;
  return proto.collect.material.TestMapResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestMapResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestMapResp}
 */
proto.collect.material.TestMapResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestMapResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestMapResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestMapResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestMapResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestCommonInfo.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestCommonInfo.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestCommonInfo.prototype.fromObject = function(obj) {
      proto.collect.material.TestCommonInfo.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestCommonInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestCommonInfo.toObject = function(includeInstance, msg) {
    var f, obj = {
      uid: jspb.Message.getFieldWithDefault(msg, 1, 0)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestCommonInfo.buildObject = function(obj) {
  var msg = new proto.collect.material.TestCommonInfo;
  proto.collect.material.TestCommonInfo.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestCommonInfo.fromObject = function(obj, msg) {
  if('uid' in obj) {
  var vuid = obj.uid;
  msg.setUid(vuid)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestCommonInfo}
 */
proto.collect.material.TestCommonInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestCommonInfo;
  return proto.collect.material.TestCommonInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestCommonInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestCommonInfo}
 */
proto.collect.material.TestCommonInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestCommonInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestCommonInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestCommonInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestCommonInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 uid = 1;
 * @return {number}
 */
proto.collect.material.TestCommonInfo.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.collect.material.TestCommonInfo} returns this
 */
proto.collect.material.TestCommonInfo.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestRefReq.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestRefReq.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestRefReq.prototype.fromObject = function(obj) {
      proto.collect.material.TestRefReq.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestRefReq} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestRefReq.toObject = function(includeInstance, msg) {
    var f, obj = {
      status: (f = msg.getStatus()) && collect_common_pb.AutoStatusInfo.toObject(includeInstance, f),
      common: (f = msg.getCommon()) && proto.collect.material.TestCommonInfo.toObject(includeInstance, f)
    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestRefReq.buildObject = function(obj) {
  var msg = new proto.collect.material.TestRefReq;
  proto.collect.material.TestRefReq.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestRefReq.fromObject = function(obj, msg) {
  if('status' in obj) {
  var vstatus = new proto.collect.common.AutoStatusInfo;
  vstatus.fromObject(obj.status);
  msg.setStatus(vstatus)
  }
  if('common' in obj) {
  var vcommon = new proto.collect.material.TestCommonInfo;
  vcommon.fromObject(obj.common);
  msg.setCommon(vcommon)
  }
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestRefReq}
 */
proto.collect.material.TestRefReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestRefReq;
  return proto.collect.material.TestRefReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestRefReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestRefReq}
 */
proto.collect.material.TestRefReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new collect_common_pb.AutoStatusInfo;
      reader.readMessage(value,collect_common_pb.AutoStatusInfo.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.collect.material.TestCommonInfo;
      reader.readMessage(value,proto.collect.material.TestCommonInfo.deserializeBinaryFromReader);
      msg.setCommon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestRefReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestRefReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestRefReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestRefReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      collect_common_pb.AutoStatusInfo.serializeBinaryToWriter
    );
  }
  f = message.getCommon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.collect.material.TestCommonInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional collect.common.AutoStatusInfo status = 1;
 * @return {?proto.collect.common.AutoStatusInfo}
 */
proto.collect.material.TestRefReq.prototype.getStatus = function() {
  return /** @type{?proto.collect.common.AutoStatusInfo} */ (
    jspb.Message.getWrapperField(this, collect_common_pb.AutoStatusInfo, 1));
};


/**
 * @param {?proto.collect.common.AutoStatusInfo|undefined} value
 * @return {!proto.collect.material.TestRefReq} returns this
*/
proto.collect.material.TestRefReq.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collect.material.TestRefReq} returns this
 */
proto.collect.material.TestRefReq.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collect.material.TestRefReq.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TestCommonInfo common = 2;
 * @return {?proto.collect.material.TestCommonInfo}
 */
proto.collect.material.TestRefReq.prototype.getCommon = function() {
  return /** @type{?proto.collect.material.TestCommonInfo} */ (
    jspb.Message.getWrapperField(this, proto.collect.material.TestCommonInfo, 2));
};


/**
 * @param {?proto.collect.material.TestCommonInfo|undefined} value
 * @return {!proto.collect.material.TestRefReq} returns this
*/
proto.collect.material.TestRefReq.prototype.setCommon = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.collect.material.TestRefReq} returns this
 */
proto.collect.material.TestRefReq.prototype.clearCommon = function() {
  return this.setCommon(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.collect.material.TestRefReq.prototype.hasCommon = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * Optional fields that are not set will be set to undefined.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
   * @param {boolean=} opt_includeInstance Deprecated. whether to include the
   *     JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.collect.material.TestRefResp.prototype.toObject = function(opt_includeInstance) {
    return proto.collect.material.TestRefResp.toObject(opt_includeInstance, this);
  };


  proto.collect.material.TestRefResp.prototype.fromObject = function(obj) {
      proto.collect.material.TestRefResp.fromObject(obj, this);
  };


  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Deprecated. Whether to include
   *     the JSPB instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.collect.material.TestRefResp} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.collect.material.TestRefResp.toObject = function(includeInstance, msg) {
    var f, obj = {

    };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
  proto.collect.material.TestRefResp.buildObject = function(obj) {
  var msg = new proto.collect.material.TestRefResp;
  proto.collect.material.TestRefResp.fromObject(obj, msg);
  return msg;
  };
  proto.collect.material.TestRefResp.fromObject = function(obj, msg) {
  };
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.collect.material.TestRefResp}
 */
proto.collect.material.TestRefResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.collect.material.TestRefResp;
  return proto.collect.material.TestRefResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.collect.material.TestRefResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.collect.material.TestRefResp}
 */
proto.collect.material.TestRefResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.collect.material.TestRefResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.collect.material.TestRefResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.collect.material.TestRefResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.collect.material.TestRefResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.collect.material);
